"""TODO: finish title.

For this file, I've copied out Ginger's functions that are relevant and have
updated them to work with local filepaths (the original file had absolute
filepaths everywhere).




"""
import glob
import importlib
import importlib.machinery
import os

import numpy
import pandas
import pygeoprocessing
from osgeo import gdal

# Redefine as little as possible. Keep it DRY!
_SOURCE_FILE = os.path.join(
    os.path.dirname(__file__), 'nci_ndr', 'predict_noxn_and_endpoints.py')
_LOADER = importlib.machinery.SourceFileLoader(
    os.path.basename(os.path.splitext(_SOURCE_FILE)[0]),  # module_name
    _SOURCE_FILE)  # the actual file location.
_NOXN_MODULE = _LOADER.load_module()

_NOXN_NODATA = _NOXN_MODULE._NOXN_NODATA
_TARGET_NODATA = _NOXN_MODULE._TARGET_NODATA
_BASE_DATA_PATH_DICT = _NOXN_MODULE._BASE_DATA_PATH_DICT


def calc_drinking_water_source_raster(
        save_as,
        water_source_table=_BASE_DATA_PATH_DICT['water_source_table'],
        countries_raster=_BASE_DATA_PATH_DICT['countries_raster']):
    """Generate a raster giving percent of drinking water from surface water.

    This raster is generated by assigning country-level values in
    _BASE_DATA_PATH_DICT['water_source_table'] to countries identified in
    _BASE_DATA_PATH_DICT['countries_raster'].

    Parameters:
        save_as (string): location to save raster where country id values have
            been reclassified to proportion of drinking water supplied by
            surface water

    Side effects:
        creates or modifies a global raster at the location `save_as`

    Returns:
        None

    """
    drinking_df = pandas.read_csv(water_source_table)
    countryid_to_drinking = pandas.Series(
        drinking_df.perc_surface.values, index=drinking_df.id).to_dict()
    pygeoprocessing.reclassify_raster(
        (countries_raster, 1), countryid_to_drinking,
        save_as, gdal.GDT_Float32, _TARGET_NODATA)


def calc_noxn_in_drinking_water(
        surface_noxn, ground_noxn, drinking_water_source):
    """Calculate noxn concentration in drinking water.

    Noxn in drinking water is calculated as the weighted average of noxn in
    surface and ground water, accounting for the fraction of drinking water
    obtained from surface vs groundwater sources.

    Parameters:
        surface_noxn (numpy.ndarray): noxn concentration in surface water, in
            mg/L
        ground_noxn (numpy.ndarray): noxn concentration in groundwater, in mg/L
        drinking_water_source (numpy.ndarray): fraction of drinking water
            obtained from surface water. The remainder is obtained from ground
            water

    Returns:
        noxn_in_drinking_water, a numpy array of noxn concentration in drinking
            water, in mg/L

    """
    noxn_in_drinking_water = numpy.empty(
        surface_noxn.shape, dtype=numpy.float32)
    noxn_in_drinking_water[:] = _TARGET_NODATA
    valid_mask = (
        (~numpy.isclose(surface_noxn, _NOXN_NODATA)) &
        (~numpy.isclose(ground_noxn, _NOXN_NODATA)) &
        (drinking_water_source != _TARGET_NODATA))
    noxn_in_drinking_water[valid_mask] = (
        surface_noxn[valid_mask] * drinking_water_source[valid_mask] +
        ground_noxn[valid_mask] * (1. - drinking_water_source[valid_mask]))
    return noxn_in_drinking_water


def _create_country_codes_raster(
        sample_raster_path, country_codes_vector, target_raster_path):
    pygeoprocessing.new_raster_from_base(
        sample_raster_path, target_raster_path, gdal.GDT_Int16, [-1], [-1])

    pygeoprocessing.rasterize(
        country_codes_vector, target_raster_path,
        option_list=["ATTRIBUTE=id"])


def main(source_concentration_rasters_dir, country_codes_vector_path,
         water_source_table,
         workspace_path, n_workers=8):
    graph = taskgraph.TaskGraph(
        os.path.join(workspace_path, '.taskgraph'), n_workers=n_workers)

    source_concentration_rasters = glob.glob(
        os.path.join(source_concentration_rasters_dir, '*.tif'))

    country_codes_raster_path = os.path.join(
        workspace_path, 'rasterized_country_codes.tif')
    country_codes_rasterize_task = graph.add_task(
        _create_country_codes_raster,
        kwargs={
            'sample_raster_path': source_concentration_rasters[0],
            'country_codes_vector': country_codes_vector_path,
            'target_raster_path': country_codes_raster_path,
        },
        task_name='create country codes raster',
        target_path_list=[country_codes_raster_path]
    )

    # Create a raster giving percent of drinking water from surface water
    percent_drinking_water_path = os.path.join(
        workspace_path, 'percent_drinking_water_by_country.tif')
    percent_drinking_water_task = graph.add_task(
        calc_drinking_water_source_raster,
        kwargs={
            'save_as': percent_drinking_water_path,
            'water_source_table': water_source_table,
            'countries_raster': country_codes_raster_path,
        },
        task_name="percent drinking water from surface water",
        dependent_task_list=[country_codes_rasterize_task]
    )

    for source_concentration_raster_path in source_concentration_rasters:
        pass
        # Step 1:
        # create a raster which defines the fraction of surface water in each
        # pixel’s drinking water (as a function of the country in which a
        # country is located)

        # Step 2:
        # The fraction of groundwater in that pixel’s drinking water is than
        # 1-that_value.

        # Step 3:
        # Based on that, the actual concentration is calculated from
        # calc_noxn_in_drinking_water

    graph.join()
    graph.close()

if __name__ == '__main__':
    main('target_workspace')
